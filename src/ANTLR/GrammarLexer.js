// Generated from Grammar.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,31,185,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,
1,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,
6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,
1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,14,1,
14,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,
1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,
28,3,28,152,8,28,1,28,1,28,1,28,5,28,157,8,28,10,28,12,28,160,9,28,3,28,
162,8,28,1,28,1,28,4,28,166,8,28,11,28,12,28,167,3,28,170,8,28,1,29,1,29,
5,29,174,8,29,10,29,12,29,177,9,29,1,30,4,30,180,8,30,11,30,12,30,181,1,
30,1,30,0,0,31,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,
49,25,51,26,53,27,55,28,57,29,59,30,61,31,1,0,5,1,0,49,57,1,0,48,57,3,0,
65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,12,13,32,32,191,
0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,
0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,
0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,
35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,1,63,1,0,0,0,3,66,1,0,0,0,5,72,1,0,0,0,
7,75,1,0,0,0,9,78,1,0,0,0,11,83,1,0,0,0,13,88,1,0,0,0,15,93,1,0,0,0,17,97,
1,0,0,0,19,100,1,0,0,0,21,104,1,0,0,0,23,107,1,0,0,0,25,112,1,0,0,0,27,118,
1,0,0,0,29,120,1,0,0,0,31,122,1,0,0,0,33,124,1,0,0,0,35,126,1,0,0,0,37,128,
1,0,0,0,39,130,1,0,0,0,41,132,1,0,0,0,43,135,1,0,0,0,45,138,1,0,0,0,47,140,
1,0,0,0,49,142,1,0,0,0,51,144,1,0,0,0,53,146,1,0,0,0,55,148,1,0,0,0,57,151,
1,0,0,0,59,171,1,0,0,0,61,179,1,0,0,0,63,64,5,58,0,0,64,65,5,61,0,0,65,2,
1,0,0,0,66,67,5,119,0,0,67,68,5,104,0,0,68,69,5,105,0,0,69,70,5,108,0,0,
70,71,5,101,0,0,71,4,1,0,0,0,72,73,5,100,0,0,73,74,5,111,0,0,74,6,1,0,0,
0,75,76,5,105,0,0,76,77,5,102,0,0,77,8,1,0,0,0,78,79,5,116,0,0,79,80,5,104,
0,0,80,81,5,101,0,0,81,82,5,110,0,0,82,10,1,0,0,0,83,84,5,101,0,0,84,85,
5,108,0,0,85,86,5,115,0,0,86,87,5,101,0,0,87,12,1,0,0,0,88,89,5,115,0,0,
89,90,5,107,0,0,90,91,5,105,0,0,91,92,5,112,0,0,92,14,1,0,0,0,93,94,5,97,
0,0,94,95,5,110,0,0,95,96,5,100,0,0,96,16,1,0,0,0,97,98,5,111,0,0,98,99,
5,114,0,0,99,18,1,0,0,0,100,101,5,110,0,0,101,102,5,111,0,0,102,103,5,116,
0,0,103,20,1,0,0,0,104,105,5,61,0,0,105,106,5,62,0,0,106,22,1,0,0,0,107,
108,5,116,0,0,108,109,5,114,0,0,109,110,5,117,0,0,110,111,5,101,0,0,111,
24,1,0,0,0,112,113,5,102,0,0,113,114,5,97,0,0,114,115,5,108,0,0,115,116,
5,115,0,0,116,117,5,101,0,0,117,26,1,0,0,0,118,119,5,43,0,0,119,28,1,0,0,
0,120,121,5,45,0,0,121,30,1,0,0,0,122,123,5,42,0,0,123,32,1,0,0,0,124,125,
5,47,0,0,125,34,1,0,0,0,126,127,5,61,0,0,127,36,1,0,0,0,128,129,5,62,0,0,
129,38,1,0,0,0,130,131,5,60,0,0,131,40,1,0,0,0,132,133,5,62,0,0,133,134,
5,61,0,0,134,42,1,0,0,0,135,136,5,60,0,0,136,137,5,61,0,0,137,44,1,0,0,0,
138,139,5,44,0,0,139,46,1,0,0,0,140,141,5,59,0,0,141,48,1,0,0,0,142,143,
5,40,0,0,143,50,1,0,0,0,144,145,5,41,0,0,145,52,1,0,0,0,146,147,5,123,0,
0,147,54,1,0,0,0,148,149,5,125,0,0,149,56,1,0,0,0,150,152,5,45,0,0,151,150,
1,0,0,0,151,152,1,0,0,0,152,161,1,0,0,0,153,162,5,48,0,0,154,158,7,0,0,0,
155,157,7,1,0,0,156,155,1,0,0,0,157,160,1,0,0,0,158,156,1,0,0,0,158,159,
1,0,0,0,159,162,1,0,0,0,160,158,1,0,0,0,161,153,1,0,0,0,161,154,1,0,0,0,
162,169,1,0,0,0,163,165,5,46,0,0,164,166,7,1,0,0,165,164,1,0,0,0,166,167,
1,0,0,0,167,165,1,0,0,0,167,168,1,0,0,0,168,170,1,0,0,0,169,163,1,0,0,0,
169,170,1,0,0,0,170,58,1,0,0,0,171,175,7,2,0,0,172,174,7,3,0,0,173,172,1,
0,0,0,174,177,1,0,0,0,175,173,1,0,0,0,175,176,1,0,0,0,176,60,1,0,0,0,177,
175,1,0,0,0,178,180,7,4,0,0,179,178,1,0,0,0,180,181,1,0,0,0,181,179,1,0,
0,0,181,182,1,0,0,0,182,183,1,0,0,0,183,184,6,30,0,0,184,62,1,0,0,0,8,0,
151,158,161,167,169,175,181,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class GrammarLexer extends antlr4.Lexer {

    static grammarFileName = "Grammar.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "':='", "'while'", "'do'", "'if'", "'then'", 
                         "'else'", "'skip'", "'and'", "'or'", "'not'", "'=>'", 
                         "'true'", "'false'", "'+'", "'-'", "'*'", "'/'", 
                         "'='", "'>'", "'<'", "'>='", "'<='", "','", "';'", 
                         "'('", "')'", "'{'", "'}'" ];
	static symbolicNames = [ null, null, "WHILE", "DO", "IF", "THEN", "ELSE", 
                          "SSKIP", "AND", "OR", "NOT", "IMP", "TRUE", "FALSE", 
                          "PLUS", "MINUS", "MULT", "DIV", "EQ", "MORETHAN", 
                          "LESSTHAN", "MOREEQ", "LESSEQ", "COMMA", "SEMI", 
                          "LPAREN", "RPAREN", "LCURLY", "RCURLY", "NUMBER", 
                          "VAR", "WS" ];
	static ruleNames = [ "T__0", "WHILE", "DO", "IF", "THEN", "ELSE", "SSKIP", 
                      "AND", "OR", "NOT", "IMP", "TRUE", "FALSE", "PLUS", 
                      "MINUS", "MULT", "DIV", "EQ", "MORETHAN", "LESSTHAN", 
                      "MOREEQ", "LESSEQ", "COMMA", "SEMI", "LPAREN", "RPAREN", 
                      "LCURLY", "RCURLY", "NUMBER", "VAR", "WS" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

GrammarLexer.EOF = antlr4.Token.EOF;
GrammarLexer.T__0 = 1;
GrammarLexer.WHILE = 2;
GrammarLexer.DO = 3;
GrammarLexer.IF = 4;
GrammarLexer.THEN = 5;
GrammarLexer.ELSE = 6;
GrammarLexer.SSKIP = 7;
GrammarLexer.AND = 8;
GrammarLexer.OR = 9;
GrammarLexer.NOT = 10;
GrammarLexer.IMP = 11;
GrammarLexer.TRUE = 12;
GrammarLexer.FALSE = 13;
GrammarLexer.PLUS = 14;
GrammarLexer.MINUS = 15;
GrammarLexer.MULT = 16;
GrammarLexer.DIV = 17;
GrammarLexer.EQ = 18;
GrammarLexer.MORETHAN = 19;
GrammarLexer.LESSTHAN = 20;
GrammarLexer.MOREEQ = 21;
GrammarLexer.LESSEQ = 22;
GrammarLexer.COMMA = 23;
GrammarLexer.SEMI = 24;
GrammarLexer.LPAREN = 25;
GrammarLexer.RPAREN = 26;
GrammarLexer.LCURLY = 27;
GrammarLexer.RCURLY = 28;
GrammarLexer.NUMBER = 29;
GrammarLexer.VAR = 30;
GrammarLexer.WS = 31;



